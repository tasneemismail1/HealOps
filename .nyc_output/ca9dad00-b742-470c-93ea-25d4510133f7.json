{"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectRetry.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectRetry.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":34,"column":4}},"15":{"start":{"line":19,"column":18},"end":{"line":26,"column":5}},"16":{"start":{"line":20,"column":8},"end":{"line":24,"column":10}},"17":{"start":{"line":21,"column":21},"end":{"line":21,"column":23}},"18":{"start":{"line":22,"column":12},"end":{"line":22,"column":95}},"19":{"start":{"line":22,"column":29},"end":{"line":22,"column":95}},"20":{"start":{"line":22,"column":77},"end":{"line":22,"column":95}},"21":{"start":{"line":23,"column":12},"end":{"line":23,"column":22}},"22":{"start":{"line":25,"column":8},"end":{"line":25,"column":26}},"23":{"start":{"line":27,"column":4},"end":{"line":33,"column":6}},"24":{"start":{"line":28,"column":8},"end":{"line":28,"column":46}},"25":{"start":{"line":28,"column":35},"end":{"line":28,"column":46}},"26":{"start":{"line":29,"column":21},"end":{"line":29,"column":23}},"27":{"start":{"line":30,"column":8},"end":{"line":30,"column":137}},"28":{"start":{"line":30,"column":25},"end":{"line":30,"column":137}},"29":{"start":{"line":30,"column":38},"end":{"line":30,"column":50}},"30":{"start":{"line":30,"column":56},"end":{"line":30,"column":57}},"31":{"start":{"line":30,"column":78},"end":{"line":30,"column":137}},"32":{"start":{"line":30,"column":102},"end":{"line":30,"column":137}},"33":{"start":{"line":31,"column":8},"end":{"line":31,"column":40}},"34":{"start":{"line":32,"column":8},"end":{"line":32,"column":22}},"35":{"start":{"line":35,"column":0},"end":{"line":35,"column":62}},"36":{"start":{"line":36,"column":0},"end":{"line":36,"column":46}},"37":{"start":{"line":38,"column":19},"end":{"line":38,"column":54}},"38":{"start":{"line":48,"column":19},"end":{"line":48,"column":21}},"39":{"start":{"line":50,"column":4},"end":{"line":104,"column":7}},"40":{"start":{"line":52,"column":12},"end":{"line":52,"column":82}},"41":{"start":{"line":57,"column":12},"end":{"line":102,"column":13}},"42":{"start":{"line":60,"column":35},"end":{"line":60,"column":40}},"43":{"start":{"line":61,"column":34},"end":{"line":61,"column":39}},"44":{"start":{"line":62,"column":37},"end":{"line":62,"column":54}},"45":{"start":{"line":63,"column":16},"end":{"line":63,"column":85}},"46":{"start":{"line":65,"column":16},"end":{"line":68,"column":17}},"47":{"start":{"line":66,"column":20},"end":{"line":66,"column":52}},"48":{"start":{"line":67,"column":20},"end":{"line":67,"column":89}},"49":{"start":{"line":73,"column":31},"end":{"line":73,"column":37}},"50":{"start":{"line":74,"column":16},"end":{"line":81,"column":17}},"51":{"start":{"line":75,"column":20},"end":{"line":79,"column":21}},"52":{"start":{"line":76,"column":24},"end":{"line":76,"column":43}},"53":{"start":{"line":77,"column":24},"end":{"line":77,"column":104}},"54":{"start":{"line":78,"column":24},"end":{"line":78,"column":30}},"55":{"start":{"line":80,"column":20},"end":{"line":80,"column":47}},"56":{"start":{"line":86,"column":16},"end":{"line":93,"column":19}},"57":{"start":{"line":88,"column":24},"end":{"line":91,"column":25}},"58":{"start":{"line":89,"column":28},"end":{"line":89,"column":48}},"59":{"start":{"line":90,"column":28},"end":{"line":90,"column":77}},"60":{"start":{"line":98,"column":16},"end":{"line":101,"column":17}},"61":{"start":{"line":99,"column":20},"end":{"line":99,"column":130}},"62":{"start":{"line":100,"column":20},"end":{"line":100,"column":115}},"63":{"start":{"line":105,"column":4},"end":{"line":105,"column":53}},"64":{"start":{"line":106,"column":4},"end":{"line":106,"column":18}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":51},"end":{"line":18,"column":52}},"loc":{"start":{"line":18,"column":63},"end":{"line":34,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":19,"column":18},"end":{"line":19,"column":19}},"loc":{"start":{"line":19,"column":30},"end":{"line":26,"column":5}},"line":19},"7":{"name":"(anonymous_7)","decl":{"start":{"line":20,"column":48},"end":{"line":20,"column":49}},"loc":{"start":{"line":20,"column":61},"end":{"line":24,"column":9}},"line":20},"8":{"name":"(anonymous_8)","decl":{"start":{"line":27,"column":11},"end":{"line":27,"column":12}},"loc":{"start":{"line":27,"column":26},"end":{"line":33,"column":5}},"line":27},"9":{"name":"detectRetryIssues","decl":{"start":{"line":47,"column":9},"end":{"line":47,"column":26}},"loc":{"start":{"line":47,"column":38},"end":{"line":107,"column":1}},"line":47},"10":{"name":"(anonymous_10)","decl":{"start":{"line":51,"column":8},"end":{"line":51,"column":9}},"loc":{"start":{"line":51,"column":28},"end":{"line":103,"column":9}},"line":51},"11":{"name":"(anonymous_11)","decl":{"start":{"line":87,"column":20},"end":{"line":87,"column":21}},"loc":{"start":{"line":87,"column":35},"end":{"line":92,"column":21}},"line":87}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{},"end":{}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{},"end":{}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{},"end":{}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":34,"column":4}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":34,"column":4}}],"line":18},"11":{"loc":{"start":{"line":20,"column":18},"end":{"line":24,"column":9}},"type":"binary-expr","locations":[{"start":{"line":20,"column":18},"end":{"line":20,"column":44}},{"start":{"line":20,"column":48},"end":{"line":24,"column":9}}],"line":20},"12":{"loc":{"start":{"line":22,"column":29},"end":{"line":22,"column":95}},"type":"if","locations":[{"start":{"line":22,"column":29},"end":{"line":22,"column":95}},{"start":{},"end":{}}],"line":22},"13":{"loc":{"start":{"line":28,"column":8},"end":{"line":28,"column":46}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":46}},{"start":{},"end":{}}],"line":28},"14":{"loc":{"start":{"line":28,"column":12},"end":{"line":28,"column":33}},"type":"binary-expr","locations":[{"start":{"line":28,"column":12},"end":{"line":28,"column":15}},{"start":{"line":28,"column":19},"end":{"line":28,"column":33}}],"line":28},"15":{"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":137}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":137}},{"start":{},"end":{}}],"line":30},"16":{"loc":{"start":{"line":30,"column":78},"end":{"line":30,"column":137}},"type":"if","locations":[{"start":{"line":30,"column":78},"end":{"line":30,"column":137}},{"start":{},"end":{}}],"line":30},"17":{"loc":{"start":{"line":57,"column":12},"end":{"line":102,"column":13}},"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":102,"column":13}},{"start":{},"end":{}}],"line":57},"18":{"loc":{"start":{"line":57,"column":16},"end":{"line":59,"column":78}},"type":"binary-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":46}},{"start":{"line":58,"column":16},"end":{"line":58,"column":49}},{"start":{"line":59,"column":17},"end":{"line":59,"column":45}},{"start":{"line":59,"column":49},"end":{"line":59,"column":77}}],"line":57},"19":{"loc":{"start":{"line":65,"column":16},"end":{"line":68,"column":17}},"type":"if","locations":[{"start":{"line":65,"column":16},"end":{"line":68,"column":17}},{"start":{},"end":{}}],"line":65},"20":{"loc":{"start":{"line":65,"column":20},"end":{"line":65,"column":101}},"type":"binary-expr","locations":[{"start":{"line":65,"column":20},"end":{"line":65,"column":26}},{"start":{"line":65,"column":30},"end":{"line":65,"column":66}},{"start":{"line":65,"column":70},"end":{"line":65,"column":101}}],"line":65},"21":{"loc":{"start":{"line":75,"column":20},"end":{"line":79,"column":21}},"type":"if","locations":[{"start":{"line":75,"column":20},"end":{"line":79,"column":21}},{"start":{},"end":{}}],"line":75},"22":{"loc":{"start":{"line":88,"column":24},"end":{"line":91,"column":25}},"type":"if","locations":[{"start":{"line":88,"column":24},"end":{"line":91,"column":25}},{"start":{},"end":{}}],"line":88},"23":{"loc":{"start":{"line":88,"column":28},"end":{"line":88,"column":96}},"type":"binary-expr","locations":[{"start":{"line":88,"column":28},"end":{"line":88,"column":61}},{"start":{"line":88,"column":65},"end":{"line":88,"column":96}}],"line":88},"24":{"loc":{"start":{"line":98,"column":16},"end":{"line":101,"column":17}},"type":"if","locations":[{"start":{"line":98,"column":16},"end":{"line":101,"column":17}},{"start":{},"end":{}}],"line":98}},"s":{"0":1,"1":8,"2":8,"3":8,"4":8,"5":8,"6":1,"7":8,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1,"24":1,"25":0,"26":1,"27":1,"28":1,"29":1,"30":1,"31":8,"32":8,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":15,"41":15,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":1,"64":1},"f":{"0":8,"1":1,"2":0,"3":1,"4":0,"5":1,"6":1,"7":0,"8":1,"9":1,"10":15,"11":0},"b":{"0":[1,1,1],"1":[1,0],"2":[8,0],"3":[8,0],"4":[8,8],"5":[0,8],"6":[8,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[1,0],"12":[0,0],"13":[0,1],"14":[1,1],"15":[1,0],"16":[8,0],"17":[0,15],"18":[15,2,1,1],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectRetry.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectRetry.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,8CA0EC;AArFD,+FAA+F;AAC/F,uDAAyC;AAEzC;;;;;;;GAOG;AACH,SAAgB,iBAAiB,CAAC,GAAQ,EAAE,IAAY;IACpD,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,qEAAqE;IACrE,UAAU,CAAC,QAAQ,CAAC,GAAU,EAAE;QAC5B,KAAK,CAAC,IAAS,EAAE,MAAW;YACxB,OAAO,CAAC,GAAG,CAAC,4BAA4B,IAAI,CAAC,IAAI,aAAa,IAAI,EAAE,CAAC,CAAC;YAEtE;;;eAGG;YACH,IACI,IAAI,CAAC,IAAI,KAAK,gBAAgB;gBAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;gBACjC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,CAAC,EAChE,CAAC;gBACC,IAAI,YAAY,GAAG,KAAK,CAAC;gBACzB,IAAI,WAAW,GAAG,KAAK,CAAC;gBACxB,IAAI,cAAc,GAAG,iBAAiB,CAAC,CAAC,wCAAwC;gBAEhF,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,CAAC,MAAM,CAAC,IAAI,cAAc,IAAI,EAAE,CAAC,CAAC;gBAErE,yFAAyF;gBACzF,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,oBAAoB,IAAI,MAAM,CAAC,EAAE,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;oBACpF,cAAc,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC;oBAChC,OAAO,CAAC,GAAG,CAAC,uCAAuC,cAAc,EAAE,CAAC,CAAC;gBACzE,CAAC;gBAED;;;mBAGG;gBACH,IAAI,QAAQ,GAAG,MAAM,CAAC;gBACtB,OAAO,QAAQ,EAAE,CAAC;oBACd,IAAI,QAAQ,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;wBACnC,WAAW,GAAG,IAAI,CAAC;wBACnB,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,IAAI,+BAA+B,IAAI,EAAE,CAAC,CAAC;wBAChF,MAAM;oBACV,CAAC;oBACD,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,qCAAqC;gBACrE,CAAC;gBAED;;;mBAGG;gBACH,UAAU,CAAC,QAAQ,CAAC,IAAI,EAAE;oBACtB,KAAK,CAAC,OAAY;wBACd,IAAI,OAAO,CAAC,IAAI,KAAK,gBAAgB,IAAI,OAAO,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;4BACvE,YAAY,GAAG,IAAI,CAAC;4BACpB,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,EAAE,CAAC,CAAC;wBACrD,CAAC;oBACL,CAAC;iBACJ,CAAC,CAAC;gBAEH;;;mBAGG;gBACH,IAAI,CAAC,YAAY,EAAE,CAAC;oBAChB,MAAM,CAAC,IAAI,CACP,GAAG,IAAI,gBAAgB,IAAI,CAAC,MAAM,CAAC,IAAI,gBAAgB,cAAc,2BAA2B,CACnG,CAAC;oBACF,OAAO,CAAC,GAAG,CACP,yCAAyC,IAAI,kBAAkB,cAAc,IAAI,CACpF,CAAC;gBACN,CAAC;YACL,CAAC;QACL,CAAC;KACJ,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,CAAC,oBAAoB,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;IACjD,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["// Import estraverse for a more flexible AST traversal that includes parent/child relationships\r\nimport * as estraverse from 'estraverse';\r\n\r\n/**\r\n * Detects API calls (like fetch or axios) that are not wrapped with retry mechanisms.\r\n * Retry logic is important for building resilient applications that handle temporary network failures.\r\n *\r\n * @param ast - The Abstract Syntax Tree of the parsed source code\r\n * @param file - File name, used for reporting and logging\r\n * @returns string[] - List of issues found in the file\r\n */\r\nexport function detectRetryIssues(ast: any, file: string): string[] {\r\n    const issues: string[] = [];\r\n\r\n    // Traverse the AST with access to parent nodes for contextual checks\r\n    estraverse.traverse(ast as any, {\r\n        enter(node: any, parent: any) {\r\n            console.log(`Inspecting node of type: ${node.type} in file: ${file}`);\r\n\r\n            /**\r\n             * Step 1: Detect API calls like `fetch(...)` or `axios(...)`.\r\n             * These are common network request methods in JS/TS, especially in microservices and frontends.\r\n             */\r\n            if (\r\n                node.type === 'CallExpression' &&\r\n                node.callee.type === 'Identifier' &&\r\n                (node.callee.name === 'fetch' || node.callee.name === 'axios')\r\n            ) {\r\n                let hasRetryLoop = false;\r\n                let hasTryCatch = false;\r\n                let identifierName = 'UnknownVariable'; // Default if not assigned to a variable\r\n\r\n                console.log(`Found API call (${node.callee.name}) in file: ${file}`);\r\n\r\n                // Step 2: If assigned to a variable, capture the variable name for better issue messages\r\n                if (parent && parent.type === 'VariableDeclarator' && parent.id.type === 'Identifier') {\r\n                    identifierName = parent.id.name;\r\n                    console.log(`API call result stored in variable: ${identifierName}`);\r\n                }\r\n\r\n                /**\r\n                 * Step 3: Check if the API call is inside a try-catch block,\r\n                 * which shows at least a basic error handling mechanism.\r\n                 */\r\n                let ancestor = parent;\r\n                while (ancestor) {\r\n                    if (ancestor.type === 'TryStatement') {\r\n                        hasTryCatch = true;\r\n                        console.log(`API call (${node.callee.name}) inside try-catch in file: ${file}`);\r\n                        break;\r\n                    }\r\n                    ancestor = ancestor.parent; // Use parent tracking to walk upward\r\n                }\r\n\r\n                /**\r\n                 * Step 4: Check whether retry logic is implemented using loops.\r\n                 * Retry logic typically appears in `for`, `while`, or recursive patterns.\r\n                 */\r\n                estraverse.traverse(node, {\r\n                    enter(subNode: any) {\r\n                        if (subNode.type === 'WhileStatement' || subNode.type === 'ForStatement') {\r\n                            hasRetryLoop = true;\r\n                            console.log(`Found retry loop in file: ${file}`);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Step 5: If retry logic is absent, flag this as a resilience issue.\r\n                 * These kinds of missed patterns can cause services to fail under unstable network conditions.\r\n                 */\r\n                if (!hasRetryLoop) {\r\n                    issues.push(\r\n                        `${file} - API call (${node.callee.name}) stored in \"${identifierName}\" is missing retry logic.`\r\n                    );\r\n                    console.log(\r\n                        `Missing retry logic detected in file: ${file} for variable \"${identifierName}\".`\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    console.log(`Issues detected: ${issues.length}`);\r\n    return issues;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"92163377fbb3427065ec6e667bcc038538e823f6","contentHash":"ca934ac131b5b323be0560897f9a38e9660c2fd04133b9c8e129b286b1757e64"},"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectTimeout.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectTimeout.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":5,"column":21},"end":{"line":5,"column":42}},"3":{"start":{"line":17,"column":19},"end":{"line":17,"column":21}},"4":{"start":{"line":18,"column":23},"end":{"line":18,"column":28}},"5":{"start":{"line":25,"column":4},"end":{"line":57,"column":7}},"6":{"start":{"line":27,"column":12},"end":{"line":55,"column":13}},"7":{"start":{"line":30,"column":16},"end":{"line":30,"column":36}},"8":{"start":{"line":31,"column":33},"end":{"line":31,"column":38}},"9":{"start":{"line":36,"column":16},"end":{"line":47,"column":17}},"10":{"start":{"line":37,"column":20},"end":{"line":46,"column":21}},"11":{"start":{"line":39,"column":47},"end":{"line":41,"column":56}},"12":{"start":{"line":39,"column":83},"end":{"line":41,"column":55}},"13":{"start":{"line":42,"column":24},"end":{"line":45,"column":25}},"14":{"start":{"line":43,"column":28},"end":{"line":43,"column":46}},"15":{"start":{"line":44,"column":28},"end":{"line":44,"column":34}},"16":{"start":{"line":52,"column":16},"end":{"line":54,"column":17}},"17":{"start":{"line":53,"column":20},"end":{"line":53,"column":90}},"18":{"start":{"line":62,"column":4},"end":{"line":62,"column":38}}},"fnMap":{"0":{"name":"detectTimeoutIssues","decl":{"start":{"line":16,"column":9},"end":{"line":16,"column":28}},"loc":{"start":{"line":16,"column":40},"end":{"line":63,"column":1}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":8},"end":{"line":26,"column":9}},"loc":{"start":{"line":26,"column":29},"end":{"line":56,"column":9}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":39,"column":73},"end":{"line":39,"column":74}},"loc":{"start":{"line":39,"column":83},"end":{"line":41,"column":55}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":27,"column":12},"end":{"line":55,"column":13}},"type":"if","locations":[{"start":{"line":27,"column":12},"end":{"line":55,"column":13}},{"start":{},"end":{}}],"line":27},"1":{"loc":{"start":{"line":27,"column":16},"end":{"line":29,"column":51}},"type":"binary-expr","locations":[{"start":{"line":27,"column":16},"end":{"line":27,"column":55}},{"start":{"line":28,"column":16},"end":{"line":28,"column":56}},{"start":{"line":29,"column":16},"end":{"line":29,"column":51}}],"line":27},"2":{"loc":{"start":{"line":37,"column":20},"end":{"line":46,"column":21}},"type":"if","locations":[{"start":{"line":37,"column":20},"end":{"line":46,"column":21}},{"start":{},"end":{}}],"line":37},"3":{"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":74}},"type":"binary-expr","locations":[{"start":{"line":37,"column":24},"end":{"line":37,"column":33}},{"start":{"line":37,"column":37},"end":{"line":37,"column":74}}],"line":37},"4":{"loc":{"start":{"line":39,"column":83},"end":{"line":41,"column":55}},"type":"binary-expr","locations":[{"start":{"line":39,"column":83},"end":{"line":39,"column":107}},{"start":{"line":40,"column":28},"end":{"line":40,"column":58}},{"start":{"line":41,"column":28},"end":{"line":41,"column":55}}],"line":39},"5":{"loc":{"start":{"line":42,"column":24},"end":{"line":45,"column":25}},"type":"if","locations":[{"start":{"line":42,"column":24},"end":{"line":45,"column":25}},{"start":{},"end":{}}],"line":42},"6":{"loc":{"start":{"line":52,"column":16},"end":{"line":54,"column":17}},"type":"if","locations":[{"start":{"line":52,"column":16},"end":{"line":54,"column":17}},{"start":{},"end":{}}],"line":52},"7":{"loc":{"start":{"line":62,"column":11},"end":{"line":62,"column":37}},"type":"cond-expr","locations":[{"start":{"line":62,"column":26},"end":{"line":62,"column":32}},{"start":{"line":62,"column":35},"end":{"line":62,"column":37}}],"line":62}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":2,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":0,"18":1},"f":{"0":1,"1":1,"2":1},"b":{"0":[1,0],"1":[1,1,1],"2":[1,1],"3":[2,2],"4":[1,1,1],"5":[1,0],"6":[0,1],"7":[1,0]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectTimeout.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectTimeout.ts"],"names":[],"mappings":";;AAaA,kDAwDC;AArED,qDAAqD;AACrD,2CAAkD;AAElD;;;;;;;;;GASG;AACH,SAAgB,mBAAmB,CAAC,GAAQ,EAAE,IAAY;IACtD,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAI,YAAY,GAAG,KAAK,CAAC,CAAC,sDAAsD;IAEhF;;;;;OAKG;IACH,IAAA,mBAAU,EAAC,GAAG,EAAE;QACZ,cAAc,CAAC,IAAI;YACf,IACI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;gBACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;gBACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,EACrC,CAAC;gBACC,YAAY,GAAG,IAAI,CAAC,CAAC,uCAAuC;gBAE5D,IAAI,UAAU,GAAG,KAAK,CAAC;gBAEvB;;;mBAGG;gBACH,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;oBACrC,IAAI,SAAS,IAAI,SAAS,CAAC,IAAI,KAAK,kBAAkB,EAAE,CAAC;wBACrD,2CAA2C;wBAC3C,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAC3D,IAAI,CAAC,IAAI,KAAK,UAAU;4BACxB,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,YAAY;4BAC9B,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,SAAS,CAC9B,CAAC;wBACF,IAAI,cAAc,EAAE,CAAC;4BACjB,UAAU,GAAG,IAAI,CAAC;4BAClB,MAAM,CAAC,sCAAsC;wBACjD,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED;;;mBAGG;gBACH,IAAI,CAAC,UAAU,EAAE,CAAC;oBACd,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,iDAAiD,CAAC,CAAC;gBAC1E,CAAC;YACL,CAAC;QACL,CAAC;KACJ,CAAC,CAAC;IAEH;;;OAGG;IACH,OAAO,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;AACtC,CAAC","sourcesContent":["// Import basic AST traversal utility from acorn-walk\r\nimport { simple as walkSimple } from 'acorn-walk';\r\n\r\n/**\r\n * Detects axios API calls that do not include a timeout configuration.\r\n * \r\n * Timeout settings are important for preventing indefinitely hanging requests and improving system resilience.\r\n * This check helps enforce best practices in network communication.\r\n * \r\n * @param ast - Abstract Syntax Tree representation of the code\r\n * @param file - Name of the file being analyzed (for tagging issues)\r\n * @returns string[] - Array of warning messages for missing timeouts\r\n */\r\nexport function detectTimeoutIssues(ast: any, file: string): string[] {\r\n    const issues: string[] = [];\r\n    let hasAxiosCall = false; // Track whether any axios call was found in this file\r\n\r\n    /**\r\n     * Traverse the AST and look for axios calls like:\r\n     * - axios.get(...)\r\n     * - axios.post(..., { timeout: 5000 })\r\n     * - axios({ method: 'get', timeout: 5000 })\r\n     */\r\n    walkSimple(ast, {\r\n        CallExpression(node) {\r\n            if (\r\n                node.callee.type === 'MemberExpression' &&\r\n                node.callee.object.type === 'Identifier' &&\r\n                node.callee.object.name === 'axios'\r\n            ) {\r\n                hasAxiosCall = true; // At least one axios call was detected\r\n\r\n                let hasTimeout = false;\r\n\r\n                /**\r\n                 * Step 1: Check all arguments passed to axios.\r\n                 * Axios config can appear as the second argument or as a full object in axios({...}).\r\n                 */\r\n                for (const configArg of node.arguments) {\r\n                    if (configArg && configArg.type === 'ObjectExpression') {\r\n                        // Search for a property with key `timeout`\r\n                        const hasTimeoutProp = configArg.properties.some((prop: any) =>\r\n                            prop.type === 'Property' &&\r\n                            prop.key.type === 'Identifier' &&\r\n                            prop.key.name === 'timeout'\r\n                        );\r\n                        if (hasTimeoutProp) {\r\n                            hasTimeout = true;\r\n                            break; // No need to check further once found\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Step 2: If no timeout setting was found in this axios call, report it.\r\n                 * Unbounded requests can lead to performance degradation and blocked threads.\r\n                 */\r\n                if (!hasTimeout) {\r\n                    issues.push(`${file} - No timeout configuration in axios API calls.`);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Only return results if axios was used in the file.\r\n     * If no axios call exists, there's nothing to report about timeout.\r\n     */\r\n    return hasAxiosCall ? issues : [];\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d438e2a3ebdffc224fced9b863ffff4352233021","contentHash":"8c5ae75f70bb3e2738e088175b4658aca1e911901df64dd2ac9219f6c1df22dc"},"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectSecureHeaders.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectSecureHeaders.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":21},"end":{"line":5,"column":42}},"3":{"start":{"line":16,"column":19},"end":{"line":16,"column":21}},"4":{"start":{"line":17,"column":28},"end":{"line":17,"column":33}},"5":{"start":{"line":18,"column":27},"end":{"line":18,"column":32}},"6":{"start":{"line":19,"column":4},"end":{"line":64,"column":7}},"7":{"start":{"line":25,"column":12},"end":{"line":36,"column":15}},"8":{"start":{"line":26,"column":16},"end":{"line":35,"column":17}},"9":{"start":{"line":34,"column":20},"end":{"line":34,"column":45}},"10":{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},"11":{"start":{"line":44,"column":16},"end":{"line":44,"column":41}},"12":{"start":{"line":53,"column":12},"end":{"line":62,"column":13}},"13":{"start":{"line":61,"column":16},"end":{"line":61,"column":40}},"14":{"start":{"line":69,"column":4},"end":{"line":71,"column":5}},"15":{"start":{"line":70,"column":8},"end":{"line":70,"column":80}},"16":{"start":{"line":72,"column":4},"end":{"line":72,"column":18}}},"fnMap":{"0":{"name":"detectSecureHeadersIssues","decl":{"start":{"line":15,"column":9},"end":{"line":15,"column":34}},"loc":{"start":{"line":15,"column":46},"end":{"line":73,"column":1}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":8},"end":{"line":24,"column":9}},"loc":{"start":{"line":24,"column":34},"end":{"line":37,"column":9}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":38},"end":{"line":25,"column":39}},"loc":{"start":{"line":25,"column":53},"end":{"line":36,"column":13}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":42,"column":8},"end":{"line":42,"column":9}},"loc":{"start":{"line":42,"column":32},"end":{"line":46,"column":9}},"line":42},"4":{"name":"(anonymous_4)","decl":{"start":{"line":52,"column":8},"end":{"line":52,"column":9}},"loc":{"start":{"line":52,"column":29},"end":{"line":63,"column":9}},"line":52}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":16},"end":{"line":35,"column":17}},"type":"if","locations":[{"start":{"line":26,"column":16},"end":{"line":35,"column":17}},{"start":{},"end":{}}],"line":26},"1":{"loc":{"start":{"line":26,"column":20},"end":{"line":33,"column":68}},"type":"binary-expr","locations":[{"start":{"line":26,"column":20},"end":{"line":26,"column":36}},{"start":{"line":27,"column":20},"end":{"line":27,"column":62}},{"start":{"line":28,"column":20},"end":{"line":28,"column":43}},{"start":{"line":29,"column":20},"end":{"line":29,"column":65}},{"start":{"line":30,"column":20},"end":{"line":30,"column":62}},{"start":{"line":31,"column":20},"end":{"line":31,"column":57}},{"start":{"line":32,"column":20},"end":{"line":32,"column":68}},{"start":{"line":33,"column":20},"end":{"line":33,"column":68}}],"line":26},"2":{"loc":{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},"type":"if","locations":[{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},{"start":{},"end":{}}],"line":43},"3":{"loc":{"start":{"line":53,"column":12},"end":{"line":62,"column":13}},"type":"if","locations":[{"start":{"line":53,"column":12},"end":{"line":62,"column":13}},{"start":{},"end":{}}],"line":53},"4":{"loc":{"start":{"line":53,"column":16},"end":{"line":60,"column":58}},"type":"binary-expr","locations":[{"start":{"line":53,"column":16},"end":{"line":53,"column":55}},{"start":{"line":54,"column":16},"end":{"line":54,"column":56}},{"start":{"line":55,"column":16},"end":{"line":55,"column":58}},{"start":{"line":56,"column":16},"end":{"line":56,"column":51}},{"start":{"line":57,"column":16},"end":{"line":57,"column":41}},{"start":{"line":58,"column":16},"end":{"line":58,"column":59}},{"start":{"line":59,"column":16},"end":{"line":59,"column":62}},{"start":{"line":60,"column":16},"end":{"line":60,"column":58}}],"line":53},"5":{"loc":{"start":{"line":69,"column":4},"end":{"line":71,"column":5}},"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":71,"column":5}},{"start":{},"end":{}}],"line":69},"6":{"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":47}},"type":"binary-expr","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":26}},{"start":{"line":69,"column":30},"end":{"line":69,"column":47}}],"line":69}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":3,"13":1,"14":1,"15":0,"16":1},"f":{"0":1,"1":1,"2":1,"3":0,"4":3},"b":{"0":[1,0],"1":[1,1,1,1,1,1,1,1],"2":[0,0],"3":[1,2],"4":[3,1,1,1,1,1,1,1],"5":[0,1],"6":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectSecureHeaders.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectSecureHeaders.ts"],"names":[],"mappings":";;AAYA,8DAmEC;AA/ED,iEAAiE;AACjE,2CAAkD;AAElD;;;;;;;;GAQG;AACH,SAAgB,yBAAyB,CAAC,GAAQ,EAAE,IAAY;IAC5D,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAI,iBAAiB,GAAG,KAAK,CAAC,CAAE,2DAA2D;IAC3F,IAAI,gBAAgB,GAAG,KAAK,CAAC,CAAG,yDAAyD;IAEzF,IAAA,mBAAU,EAAC,GAAG,EAAE;QACZ;;;WAGG;QACH,mBAAmB,CAAC,IAAI;YACpB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBACpC,IACI,WAAW,CAAC,IAAI;oBAChB,WAAW,CAAC,IAAI,CAAC,IAAI,KAAK,gBAAgB;oBAC1C,WAAW,CAAC,IAAI,CAAC,MAAM;oBACvB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;oBAC7C,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS;oBAC1C,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC;oBACrC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS;oBAChD,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,QAAQ,EAClD,CAAC;oBACC,iBAAiB,GAAG,IAAI,CAAC;gBAC7B,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED;;;WAGG;QACH,iBAAiB,CAAC,IAAI;YAClB,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;gBACjC,iBAAiB,GAAG,IAAI,CAAC;YAC7B,CAAC;QACL,CAAC;QAED;;;;WAIG;QACH,cAAc,CAAC,IAAI;YACf,IACI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;gBACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;gBACxC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY;gBAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,KAAK;gBACnC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC;gBACzB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,gBAAgB;gBAC3C,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;gBAC9C,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,EAC5C,CAAC;gBACC,gBAAgB,GAAG,IAAI,CAAC;YAC5B,CAAC;QACL,CAAC;KACJ,CAAC,CAAC;IAEH;;;OAGG;IACH,IAAI,CAAC,iBAAiB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,mDAAmD,CAAC,CAAC;IAC5E,CAAC;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["// Import the simple walker from acorn-walk to traverse AST nodes\r\nimport { simple as walkSimple } from 'acorn-walk';\r\n\r\n/**\r\n * Detects whether the Helmet middleware is properly imported and used.\r\n * Helmet helps secure Express apps by setting HTTP headers appropriately.\r\n * Its presence is considered a best practice for Node.js application security.\r\n * \r\n * @param ast - The Abstract Syntax Tree representing the code file\r\n * @param file - The file name for which this analysis is performed\r\n * @returns string[] - List of issues indicating missing Helmet usage\r\n */\r\nexport function detectSecureHeadersIssues(ast: any, file: string): string[] {\r\n    const issues: string[] = [];\r\n    let foundHelmetImport = false;  // Tracks if `helmet` is imported via require or ES6 import\r\n    let foundHelmetUsage = false;   // Tracks if `helmet()` is actually applied via app.use()\r\n\r\n    walkSimple(ast, {\r\n        /**\r\n         * Step 1: Check for `const helmet = require('helmet')`\r\n         * This is common in CommonJS-style Express projects.\r\n         */\r\n        VariableDeclaration(node) {\r\n            node.declarations.forEach(declaration => {\r\n                if (\r\n                    declaration.init &&\r\n                    declaration.init.type === 'CallExpression' &&\r\n                    declaration.init.callee &&\r\n                    declaration.init.callee.type === 'Identifier' &&\r\n                    declaration.init.callee.name === 'require' &&\r\n                    declaration.init.arguments.length > 0 &&\r\n                    declaration.init.arguments[0].type === 'Literal' &&\r\n                    declaration.init.arguments[0].value === 'helmet'\r\n                ) {\r\n                    foundHelmetImport = true;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Step 2: Check for `import helmet from 'helmet'`\r\n         * This is common in ESModule-style Express projects.\r\n         */\r\n        ImportDeclaration(node) {\r\n            if (node.source.value === 'helmet') {\r\n                foundHelmetImport = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Step 3: Check for the actual middleware usage:\r\n         * `app.use(helmet())`\r\n         * This is essential to confirm the imported Helmet middleware is actually applied.\r\n         */\r\n        CallExpression(node) {\r\n            if (\r\n                node.callee.type === 'MemberExpression' &&\r\n                node.callee.object.type === 'Identifier' &&\r\n                node.callee.property.type === 'Identifier' &&\r\n                node.callee.property.name === 'use' &&\r\n                node.arguments.length > 0 &&\r\n                node.arguments[0].type === 'CallExpression' &&\r\n                node.arguments[0].callee.type === 'Identifier' &&\r\n                node.arguments[0].callee.name === 'helmet'\r\n            ) {\r\n                foundHelmetUsage = true;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Final Check: If either the import or usage is missing, flag a security issue.\r\n     * Simply importing Helmet without applying it doesn't provide protection.\r\n     */\r\n    if (!foundHelmetImport || !foundHelmetUsage) {\r\n        issues.push(`${file} - Secure headers middleware (helmet) is missing.`);\r\n    }\r\n\r\n    return issues;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8bbc7169cf8fbcc2c3be1cbaf0388a12b49ab323","contentHash":"17e18ff156acac537074b1cfc0e744e23a021aa42ffc42a0d7aff43cd70d9bb0"},"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectCircuitBreaker.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectCircuitBreaker.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":34,"column":4}},"15":{"start":{"line":19,"column":18},"end":{"line":26,"column":5}},"16":{"start":{"line":20,"column":8},"end":{"line":24,"column":10}},"17":{"start":{"line":21,"column":21},"end":{"line":21,"column":23}},"18":{"start":{"line":22,"column":12},"end":{"line":22,"column":95}},"19":{"start":{"line":22,"column":29},"end":{"line":22,"column":95}},"20":{"start":{"line":22,"column":77},"end":{"line":22,"column":95}},"21":{"start":{"line":23,"column":12},"end":{"line":23,"column":22}},"22":{"start":{"line":25,"column":8},"end":{"line":25,"column":26}},"23":{"start":{"line":27,"column":4},"end":{"line":33,"column":6}},"24":{"start":{"line":28,"column":8},"end":{"line":28,"column":46}},"25":{"start":{"line":28,"column":35},"end":{"line":28,"column":46}},"26":{"start":{"line":29,"column":21},"end":{"line":29,"column":23}},"27":{"start":{"line":30,"column":8},"end":{"line":30,"column":137}},"28":{"start":{"line":30,"column":25},"end":{"line":30,"column":137}},"29":{"start":{"line":30,"column":38},"end":{"line":30,"column":50}},"30":{"start":{"line":30,"column":56},"end":{"line":30,"column":57}},"31":{"start":{"line":30,"column":78},"end":{"line":30,"column":137}},"32":{"start":{"line":30,"column":102},"end":{"line":30,"column":137}},"33":{"start":{"line":31,"column":8},"end":{"line":31,"column":40}},"34":{"start":{"line":32,"column":8},"end":{"line":32,"column":22}},"35":{"start":{"line":35,"column":0},"end":{"line":35,"column":62}},"36":{"start":{"line":36,"column":0},"end":{"line":36,"column":64}},"37":{"start":{"line":37,"column":14},"end":{"line":37,"column":44}},"38":{"start":{"line":38,"column":21},"end":{"line":38,"column":42}},"39":{"start":{"line":40,"column":19},"end":{"line":40,"column":21}},"40":{"start":{"line":41,"column":16},"end":{"line":44,"column":6}},"41":{"start":{"line":45,"column":4},"end":{"line":69,"column":7}},"42":{"start":{"line":47,"column":33},"end":{"line":47,"column":74}},"43":{"start":{"line":48,"column":28},"end":{"line":50,"column":64}},"44":{"start":{"line":51,"column":28},"end":{"line":51,"column":93}},"45":{"start":{"line":52,"column":12},"end":{"line":67,"column":13}},"46":{"start":{"line":53,"column":34},"end":{"line":58,"column":18}},"47":{"start":{"line":54,"column":20},"end":{"line":57,"column":66}},"48":{"start":{"line":59,"column":16},"end":{"line":66,"column":17}},"49":{"start":{"line":60,"column":20},"end":{"line":65,"column":23}},"50":{"start":{"line":70,"column":4},"end":{"line":70,"column":18}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":51},"end":{"line":18,"column":52}},"loc":{"start":{"line":18,"column":63},"end":{"line":34,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":19,"column":18},"end":{"line":19,"column":19}},"loc":{"start":{"line":19,"column":30},"end":{"line":26,"column":5}},"line":19},"7":{"name":"(anonymous_7)","decl":{"start":{"line":20,"column":48},"end":{"line":20,"column":49}},"loc":{"start":{"line":20,"column":61},"end":{"line":24,"column":9}},"line":20},"8":{"name":"(anonymous_8)","decl":{"start":{"line":27,"column":11},"end":{"line":27,"column":12}},"loc":{"start":{"line":27,"column":26},"end":{"line":33,"column":5}},"line":27},"9":{"name":"detectCircuitBreakerIssues","decl":{"start":{"line":39,"column":9},"end":{"line":39,"column":35}},"loc":{"start":{"line":39,"column":52},"end":{"line":71,"column":1}},"line":39},"10":{"name":"(anonymous_10)","decl":{"start":{"line":46,"column":8},"end":{"line":46,"column":9}},"loc":{"start":{"line":46,"column":40},"end":{"line":68,"column":9}},"line":46},"11":{"name":"(anonymous_11)","decl":{"start":{"line":53,"column":49},"end":{"line":53,"column":50}},"loc":{"start":{"line":53,"column":63},"end":{"line":58,"column":17}},"line":53}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{},"end":{}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{},"end":{}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{},"end":{}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":34,"column":4}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":34,"column":4}}],"line":18},"11":{"loc":{"start":{"line":20,"column":18},"end":{"line":24,"column":9}},"type":"binary-expr","locations":[{"start":{"line":20,"column":18},"end":{"line":20,"column":44}},{"start":{"line":20,"column":48},"end":{"line":24,"column":9}}],"line":20},"12":{"loc":{"start":{"line":22,"column":29},"end":{"line":22,"column":95}},"type":"if","locations":[{"start":{"line":22,"column":29},"end":{"line":22,"column":95}},{"start":{},"end":{}}],"line":22},"13":{"loc":{"start":{"line":28,"column":8},"end":{"line":28,"column":46}},"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":46}},{"start":{},"end":{}}],"line":28},"14":{"loc":{"start":{"line":28,"column":12},"end":{"line":28,"column":33}},"type":"binary-expr","locations":[{"start":{"line":28,"column":12},"end":{"line":28,"column":15}},{"start":{"line":28,"column":19},"end":{"line":28,"column":33}}],"line":28},"15":{"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":137}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":30,"column":137}},{"start":{},"end":{}}],"line":30},"16":{"loc":{"start":{"line":30,"column":78},"end":{"line":30,"column":137}},"type":"if","locations":[{"start":{"line":30,"column":78},"end":{"line":30,"column":137}},{"start":{},"end":{}}],"line":30},"17":{"loc":{"start":{"line":48,"column":28},"end":{"line":50,"column":64}},"type":"binary-expr","locations":[{"start":{"line":48,"column":28},"end":{"line":48,"column":67}},{"start":{"line":49,"column":16},"end":{"line":49,"column":51}},{"start":{"line":50,"column":16},"end":{"line":50,"column":64}}],"line":48},"18":{"loc":{"start":{"line":51,"column":28},"end":{"line":51,"column":93}},"type":"binary-expr","locations":[{"start":{"line":51,"column":28},"end":{"line":51,"column":61}},{"start":{"line":51,"column":65},"end":{"line":51,"column":93}}],"line":51},"19":{"loc":{"start":{"line":52,"column":12},"end":{"line":67,"column":13}},"type":"if","locations":[{"start":{"line":52,"column":12},"end":{"line":67,"column":13}},{"start":{},"end":{}}],"line":52},"20":{"loc":{"start":{"line":52,"column":16},"end":{"line":52,"column":34}},"type":"binary-expr","locations":[{"start":{"line":52,"column":16},"end":{"line":52,"column":23}},{"start":{"line":52,"column":27},"end":{"line":52,"column":34}}],"line":52},"21":{"loc":{"start":{"line":54,"column":28},"end":{"line":57,"column":64}},"type":"binary-expr","locations":[{"start":{"line":54,"column":28},"end":{"line":54,"column":62}},{"start":{"line":55,"column":24},"end":{"line":55,"column":67}},{"start":{"line":56,"column":24},"end":{"line":56,"column":65}},{"start":{"line":57,"column":24},"end":{"line":57,"column":64}}],"line":54},"22":{"loc":{"start":{"line":59,"column":16},"end":{"line":66,"column":17}},"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":66,"column":17}},{"start":{},"end":{}}],"line":59}},"s":{"0":1,"1":22,"2":22,"3":22,"4":22,"5":22,"6":1,"7":22,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":1,"24":1,"25":0,"26":1,"27":1,"28":1,"29":1,"30":1,"31":22,"32":22,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0},"f":{"0":22,"1":1,"2":0,"3":1,"4":0,"5":1,"6":1,"7":0,"8":1,"9":1,"10":0,"11":0},"b":{"0":[1,1,1],"1":[1,0],"2":[22,0],"3":[22,0],"4":[22,22],"5":[0,22],"6":[22,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[1,0],"12":[0,0],"13":[0,1],"14":[1,1],"15":[1,0],"16":[22,0],"17":[0,0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0,0,0],"22":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectCircuitBreaker.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectCircuitBreaker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,gEA2CC;AA9CD,6CAA+B;AAC/B,2CAAsC;AAEtC,SAAgB,0BAA0B,CAAC,IAAY,EAAE,QAAgB;IACvE,MAAM,MAAM,GAAU,EAAE,CAAC;IAEzB,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE;QAC5B,WAAW,EAAE,QAAQ;QACrB,UAAU,EAAE,QAAQ;KACrB,CAAC,CAAC;IAEH,IAAA,qBAAQ,EAAC,GAAG,EAAE;QACZ,cAAc,CAAC,IAAS,EAAE,SAAgB;YACxC,MAAM,YAAY,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAE/D,MAAM,OAAO,GACX,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;gBACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO;gBACnC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEnD,MAAM,OAAO,GACX,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,OAAO,CAAC;YAEpE,IAAI,OAAO,IAAI,OAAO,EAAE,CAAC;gBACvB,MAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,QAAa,EAAE,EAAE;oBACjD,OAAO,CACL,QAAQ,CAAC,IAAI,KAAK,gBAAgB;wBAClC,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;wBAC3C,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS;wBACzC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,MAAM,CACzC,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,SAAS,EAAE,CAAC;oBACf,MAAM,CAAC,IAAI,CAAC;wBACV,IAAI;wBACJ,OAAO,EAAE,wCAAwC;wBACjD,KAAK,EAAE,yBAAyB;wBAChC,QAAQ;qBACT,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import * as acorn from 'acorn';\r\nimport { ancestor } from 'acorn-walk';\r\n\r\nexport function detectCircuitBreakerIssues(code: string, filePath: string) {\r\n  const issues: any[] = [];\r\n\r\n  const ast = acorn.parse(code, {\r\n    ecmaVersion: 'latest',\r\n    sourceType: 'module',\r\n  });\r\n\r\n  ancestor(ast, {\r\n    CallExpression(node: any, ancestors: any[]) {\r\n      const axiosMethods = ['get', 'post', 'put', 'delete', 'patch'];\r\n\r\n      const isAxios =\r\n        node.callee.type === 'MemberExpression' &&\r\n        node.callee.object.name === 'axios' &&\r\n        axiosMethods.includes(node.callee.property.name);\r\n\r\n      const isFetch =\r\n        node.callee.type === 'Identifier' && node.callee.name === 'fetch';\r\n\r\n      if (isAxios || isFetch) {\r\n        const isWrapped = ancestors.some((ancestor: any) => {\r\n          return (\r\n            ancestor.type === 'CallExpression' &&\r\n            ancestor.callee.type === 'MemberExpression' &&\r\n            ancestor.callee.object.name === 'breaker' &&\r\n            ancestor.callee.property.name === 'fire'\r\n          );\r\n        });\r\n\r\n        if (!isWrapped) {\r\n          issues.push({\r\n            node,\r\n            message: 'Missing circuit breaker (breaker.fire)',\r\n            fixId: 'circuit-breaker-missing',\r\n            filePath,\r\n          });\r\n        }\r\n      }\r\n    },\r\n  });\r\n\r\n  return issues;\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"92e8b4e8c2c99d6d731c898736747f3a9f4509a2","contentHash":"79cd1e956b2f8705adcd7aab03a306b73015c84e660b9919a44bcc39696665ea"},"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectHealthCheck.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectHealthCheck.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":58}},"2":{"start":{"line":5,"column":21},"end":{"line":5,"column":42}},"3":{"start":{"line":17,"column":19},"end":{"line":17,"column":21}},"4":{"start":{"line":18,"column":25},"end":{"line":18,"column":30}},"5":{"start":{"line":23,"column":4},"end":{"line":39,"column":7}},"6":{"start":{"line":26,"column":12},"end":{"line":37,"column":13}},"7":{"start":{"line":32,"column":28},"end":{"line":32,"column":45}},"8":{"start":{"line":34,"column":16},"end":{"line":36,"column":17}},"9":{"start":{"line":35,"column":20},"end":{"line":35,"column":42}},"10":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"11":{"start":{"line":45,"column":8},"end":{"line":45,"column":68}},"12":{"start":{"line":47,"column":4},"end":{"line":47,"column":18}}},"fnMap":{"0":{"name":"detectHealthCheckIssues","decl":{"start":{"line":16,"column":9},"end":{"line":16,"column":32}},"loc":{"start":{"line":16,"column":44},"end":{"line":48,"column":1}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":8},"end":{"line":24,"column":9}},"loc":{"start":{"line":24,"column":29},"end":{"line":38,"column":9}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":12},"end":{"line":37,"column":13}},"type":"if","locations":[{"start":{"line":26,"column":12},"end":{"line":37,"column":13}},{"start":{},"end":{}}],"line":26},"1":{"loc":{"start":{"line":26,"column":16},"end":{"line":30,"column":51}},"type":"binary-expr","locations":[{"start":{"line":26,"column":16},"end":{"line":26,"column":55}},{"start":{"line":27,"column":16},"end":{"line":27,"column":56}},{"start":{"line":28,"column":16},"end":{"line":28,"column":49}},{"start":{"line":29,"column":16},"end":{"line":29,"column":58}},{"start":{"line":30,"column":16},"end":{"line":30,"column":51}}],"line":26},"2":{"loc":{"start":{"line":34,"column":16},"end":{"line":36,"column":17}},"type":"if","locations":[{"start":{"line":34,"column":16},"end":{"line":36,"column":17}},{"start":{},"end":{}}],"line":34},"3":{"loc":{"start":{"line":34,"column":20},"end":{"line":34,"column":98}},"type":"binary-expr","locations":[{"start":{"line":34,"column":20},"end":{"line":34,"column":42}},{"start":{"line":34,"column":47},"end":{"line":34,"column":70}},{"start":{"line":34,"column":74},"end":{"line":34,"column":97}}],"line":34},"4":{"loc":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},{"start":{},"end":{}}],"line":44}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":2,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1},"f":{"0":1,"1":2},"b":{"0":[1,1],"1":[2,2,2,1,1],"2":[1,0],"3":[1,1,0],"4":[0,1]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectHealthCheck.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectHealthCheck.ts"],"names":[],"mappings":";;AAaA,0DAsCC;AAnDD,2FAA2F;AAC3F,2CAAkD;AAElD;;;;;;;;;GASG;AACH,SAAgB,uBAAuB,CAAC,GAAQ,EAAE,IAAY;IAC1D,MAAM,MAAM,GAAa,EAAE,CAAC,CAAC,+BAA+B;IAC5D,IAAI,cAAc,GAAG,KAAK,CAAC,CAAE,iDAAiD;IAE9E;;;OAGG;IACH,IAAA,mBAAU,EAAC,GAAG,EAAE;QACZ,cAAc,CAAC,IAAI;YACf,iDAAiD;YACjD,IACI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;gBACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;gBACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK;gBACjC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY;gBAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,KAAK,EACrC,CAAC;gBACC,2EAA2E;gBAC3E,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAE9B,sFAAsF;gBACtF,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,SAAS,IAAI,GAAG,CAAC,KAAK,KAAK,SAAS,CAAC,EAAE,CAAC;oBACjF,cAAc,GAAG,IAAI,CAAC;gBAC1B,CAAC;YACL,CAAC;QACL,CAAC;KACJ,CAAC,CAAC;IAEH;;;OAGG;IACH,IAAI,CAAC,cAAc,EAAE,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,uCAAuC,CAAC,CAAC;IAChE,CAAC;IAED,OAAO,MAAM,CAAC,CAAC,qDAAqD;AACxE,CAAC","sourcesContent":["// Import the \"simple\" walker from acorn-walk to traverse the AST without ancestor tracking\r\nimport { simple as walkSimple } from 'acorn-walk';\r\n\r\n/**\r\n * Detects whether the code includes a proper health-check endpoint,\r\n * such as `app.get('/health')` or `app.get('/status')`, commonly used in microservices.\r\n * \r\n * Health endpoints are essential for system observability and uptime monitoring.\r\n * \r\n * @param ast - Abstract Syntax Tree of the JavaScript/TypeScript file\r\n * @param file - Filename to help contextualize any reported issue\r\n * @returns string[] - Array of issue descriptions (if any)\r\n */\r\nexport function detectHealthCheckIssues(ast: any, file: string): string[] {\r\n    const issues: string[] = []; // Container for storing issues\r\n    let hasHealthCheck = false;  // Boolean flag to track health endpoint presence\r\n\r\n    /**\r\n     * Traverse the AST looking for `app.get('/health')` or `app.get('/status')`\r\n     * This is a typical pattern for health-check routes in Node.js Express apps.\r\n     */\r\n    walkSimple(ast, {\r\n        CallExpression(node) {\r\n            // Check if the call is of the form: app.get(...)\r\n            if (\r\n                node.callee.type === 'MemberExpression' &&\r\n                node.callee.object.type === 'Identifier' &&\r\n                node.callee.object.name === 'app' &&\r\n                node.callee.property.type === 'Identifier' &&\r\n                node.callee.property.name === 'get'\r\n            ) {\r\n                // Retrieve the first argument of app.get(), which should be the route path\r\n                const arg = node.arguments[0];\r\n\r\n                // If the path is '/health' or '/status', we assume it's a valid health-check endpoint\r\n                if (arg.type === 'Literal' && (arg.value === '/health' || arg.value === '/status')) {\r\n                    hasHealthCheck = true;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * If no health-check endpoint was found in this file, flag it as an issue.\r\n     * Health-checks are vital for service discovery and load balancer integrations.\r\n     */\r\n    if (!hasHealthCheck) {\r\n        issues.push(`${file} - No health-check endpoint detected.`);\r\n    }\r\n\r\n    return issues; // Return any issues found (or an empty list if none)\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"aa40b73d7addd38bd91ab30b6aadb02bcdea0899","contentHash":"2eb0b2814b4a7b88c891d7ed55b6002cf9794c60a7bc011ce159d1bcea438c04"},"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectDependency.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectDependency.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":56}},"2":{"start":{"line":5,"column":21},"end":{"line":5,"column":42}},"3":{"start":{"line":15,"column":19},"end":{"line":15,"column":21}},"4":{"start":{"line":21,"column":4},"end":{"line":40,"column":7}},"5":{"start":{"line":24,"column":12},"end":{"line":38,"column":13}},"6":{"start":{"line":30,"column":46},"end":{"line":33,"column":64}},"7":{"start":{"line":30,"column":75},"end":{"line":33,"column":63}},"8":{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},"9":{"start":{"line":36,"column":20},"end":{"line":36,"column":134}},"10":{"start":{"line":41,"column":4},"end":{"line":41,"column":18}}},"fnMap":{"0":{"name":"detectDependencyIssues","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":31}},"loc":{"start":{"line":14,"column":43},"end":{"line":42,"column":1}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":8},"end":{"line":22,"column":9}},"loc":{"start":{"line":22,"column":39},"end":{"line":39,"column":9}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":61},"end":{"line":30,"column":62}},"loc":{"start":{"line":30,"column":75},"end":{"line":33,"column":63}},"line":30}},"branchMap":{"0":{"loc":{"start":{"line":24,"column":12},"end":{"line":38,"column":13}},"type":"if","locations":[{"start":{"line":24,"column":12},"end":{"line":38,"column":13}},{"start":{},"end":{}}],"line":24},"1":{"loc":{"start":{"line":30,"column":75},"end":{"line":33,"column":63}},"type":"binary-expr","locations":[{"start":{"line":30,"column":75},"end":{"line":30,"column":111}},{"start":{"line":31,"column":20},"end":{"line":31,"column":59}},{"start":{"line":32,"column":20},"end":{"line":32,"column":58}},{"start":{"line":33,"column":20},"end":{"line":33,"column":63}}],"line":30},"2":{"loc":{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},"type":"if","locations":[{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},{"start":{},"end":{}}],"line":35}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"f":{"0":1,"1":0,"2":0},"b":{"0":[0,0],"1":[0,0,0,0],"2":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectDependency.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectDependency.ts"],"names":[],"mappings":";;AAWA,wDAmCC;AA9CD,gGAAgG;AAChG,2CAAsD;AAEtD;;;;;;;GAOG;AACH,SAAgB,sBAAsB,CAAC,GAAQ,EAAE,IAAY;IACzD,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B;;;;OAIG;IACH,IAAA,qBAAY,EAAC,GAAG,EAAE;QACd,aAAa,CAAC,IAAS,EAAE,SAAgB;YACrC,mGAAmG;YACnG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;gBAEpC;;;;mBAIG;gBACH,MAAM,qBAAqB,GAAG,SAAS,CAAC,IAAI,CACxC,CAAC,QAAQ,EAAE,EAAE,CACT,QAAQ,CAAC,IAAI,KAAK,kBAAkB;oBACpC,QAAQ,CAAC,IAAI,KAAK,qBAAqB;oBACvC,QAAQ,CAAC,IAAI,KAAK,oBAAoB;oBACtC,QAAQ,CAAC,IAAI,KAAK,yBAAyB,CAClD,CAAC;gBAEF,gEAAgE;gBAChE,IAAI,qBAAqB,EAAE,CAAC;oBACxB,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,qCAAqC,IAAI,CAAC,MAAM,CAAC,IAAI,wCAAwC,CAAC,CAAC;gBACtH,CAAC;YACL,CAAC;QACL,CAAC;KACJ,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["// Import the \"ancestor\" walker to analyze a node along with its hierarchical context in the AST\r\nimport { ancestor as walkAncestor } from \"acorn-walk\";\r\n\r\n/**\r\n * Detects hardcoded dependencies inside classes or functions by inspecting 'new' expressions.\r\n * This check is useful for identifying violations of dependency injection principles.\r\n * \r\n * @param ast - Parsed Abstract Syntax Tree (AST) of the code\r\n * @param file - The filename for tagging the detected issue\r\n * @returns string[] - List of identified dependency issues with descriptions\r\n */\r\nexport function detectDependencyIssues(ast: any, file: string): string[] {\r\n    const issues: string[] = [];\r\n\r\n    /**\r\n     * Traverse the AST to find instances of 'new ClassName()'.\r\n     * Using 'ancestor' traversal allows us to access parent nodes and understand context,\r\n     * such as whether the instantiation is happening inside a class or function.\r\n     */\r\n    walkAncestor(ast, {\r\n        NewExpression(node: any, ancestors: any[]) {\r\n            // We're only interested in direct class constructors like `new Service()`, not computed or dynamic\r\n            if (node.callee.type === 'Identifier') {\r\n\r\n                /**\r\n                 * Check if this `new` statement is declared within the scope of a class\r\n                 * or any kind of function (declaration, expression, arrow).\r\n                 * If so, it's likely a tightly-coupled dependency that violates clean architecture.\r\n                 */\r\n                const insideClassOrFunction = ancestors.some(\r\n                    (ancestor) =>\r\n                        ancestor.type === \"ClassDeclaration\" ||\r\n                        ancestor.type === \"FunctionDeclaration\" ||\r\n                        ancestor.type === \"FunctionExpression\" ||\r\n                        ancestor.type === \"ArrowFunctionExpression\"\r\n                );\r\n\r\n                // If a hardcoded dependency is detected, report it with context\r\n                if (insideClassOrFunction) {\r\n                    issues.push(`${file} - Hardcoded dependency detected: ${node.callee.name}. Consider using dependency injection.`);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return issues;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"85ef49222f85fe15fedbe55329724070f1f64174","contentHash":"438e6c1f6a0f5d56afeda12e726530f03723e5857ce7c289083a898a44792205"},"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectLogging.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectLogging.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":50}},"2":{"start":{"line":5,"column":21},"end":{"line":5,"column":42}},"3":{"start":{"line":16,"column":19},"end":{"line":16,"column":21}},"4":{"start":{"line":21,"column":4},"end":{"line":49,"column":7}},"5":{"start":{"line":23,"column":12},"end":{"line":47,"column":13}},"6":{"start":{"line":24,"column":33},"end":{"line":24,"column":38}},"7":{"start":{"line":30,"column":16},"end":{"line":39,"column":19}},"8":{"start":{"line":32,"column":24},"end":{"line":37,"column":25}},"9":{"start":{"line":36,"column":28},"end":{"line":36,"column":46}},"10":{"start":{"line":44,"column":16},"end":{"line":46,"column":17}},"11":{"start":{"line":45,"column":20},"end":{"line":45,"column":81}},"12":{"start":{"line":50,"column":4},"end":{"line":50,"column":18}}},"fnMap":{"0":{"name":"detectLoggingIssues","decl":{"start":{"line":15,"column":9},"end":{"line":15,"column":28}},"loc":{"start":{"line":15,"column":40},"end":{"line":51,"column":1}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":8},"end":{"line":22,"column":9}},"loc":{"start":{"line":22,"column":27},"end":{"line":48,"column":9}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":20},"end":{"line":31,"column":21}},"loc":{"start":{"line":31,"column":46},"end":{"line":38,"column":21}},"line":31}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":12},"end":{"line":47,"column":13}},"type":"if","locations":[{"start":{"line":23,"column":12},"end":{"line":47,"column":13}},{"start":{},"end":{}}],"line":23},"1":{"loc":{"start":{"line":32,"column":24},"end":{"line":37,"column":25}},"type":"if","locations":[{"start":{"line":32,"column":24},"end":{"line":37,"column":25}},{"start":{},"end":{}}],"line":32},"2":{"loc":{"start":{"line":32,"column":28},"end":{"line":34,"column":70}},"type":"binary-expr","locations":[{"start":{"line":32,"column":28},"end":{"line":32,"column":72}},{"start":{"line":33,"column":28},"end":{"line":33,"column":73}},{"start":{"line":34,"column":28},"end":{"line":34,"column":70}}],"line":32},"3":{"loc":{"start":{"line":44,"column":16},"end":{"line":46,"column":17}},"type":"if","locations":[{"start":{"line":44,"column":16},"end":{"line":46,"column":17}},{"start":{},"end":{}}],"line":44}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":1},"f":{"0":1,"1":1,"2":1},"b":{"0":[1,0],"1":[1,0],"2":[1,1,1],"3":[0,1]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectLogging.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectLogging.ts"],"names":[],"mappings":";;AAYA,kDAyCC;AArDD,mEAAmE;AACnE,2CAAkD;AAElD;;;;;;;;GAQG;AACH,SAAgB,mBAAmB,CAAC,GAAQ,EAAE,IAAY;IACtD,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B;;;OAGG;IACH,IAAA,mBAAU,EAAC,GAAG,EAAE;QACZ,YAAY,CAAC,IAAI;YACb,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,UAAU,GAAG,KAAK,CAAC;gBAEvB;;;;mBAIG;gBACH,IAAA,mBAAU,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;oBAC1B,cAAc,CAAC,SAAS;wBACpB,IACI,SAAS,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;4BAC5C,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;4BAC7C,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,mCAAmC;0BAChF,CAAC;4BACC,UAAU,GAAG,IAAI,CAAC;wBACtB,CAAC;oBACL,CAAC;iBACJ,CAAC,CAAC;gBAEH;;;mBAGG;gBACH,IAAI,CAAC,UAAU,EAAE,CAAC;oBACd,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,wCAAwC,CAAC,CAAC;gBACjE,CAAC;YACL,CAAC;QACL,CAAC;KACJ,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["// Import the simple walker from acorn-walk for basic AST traversal\r\nimport { simple as walkSimple } from 'acorn-walk';\r\n\r\n/**\r\n * Detects missing logging inside try-catch blocks.\r\n * Logging in catch blocks is a key practice for debugging and monitoring failures,\r\n * especially in production-grade microservices and applications.\r\n * \r\n * @param ast - Abstract Syntax Tree representing the parsed source code\r\n * @param file - The file name being analyzed (used for reporting)\r\n * @returns string[] - List of issues describing missing logging cases\r\n */\r\nexport function detectLoggingIssues(ast: any, file: string): string[] {\r\n    const issues: string[] = [];\r\n\r\n    /**\r\n     * Step 1: Traverse the AST to find all try-catch statements.\r\n     * We focus on the `handler` block (i.e., the catch block) to check for logging usage.\r\n     */\r\n    walkSimple(ast, {\r\n        TryStatement(node) {\r\n            if (node.handler) {\r\n                let hasLogging = false;\r\n\r\n                /**\r\n                 * Step 2: Inspect the contents of the catch block.\r\n                 * We're looking for `console.log`, `console.error`, or any `console` method,\r\n                 * which typically indicates that an error is at least being reported.\r\n                 */\r\n                walkSimple(node.handler.body, {\r\n                    CallExpression(innerNode) {\r\n                        if (\r\n                            innerNode.callee.type === 'MemberExpression' &&\r\n                            innerNode.callee.object.type === 'Identifier' &&\r\n                            innerNode.callee.object.name === 'console' // Matches `console.log(...)`, etc.\r\n                        ) {\r\n                            hasLogging = true;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Step 3: If the catch block contains no logging, we flag it as a potential issue.\r\n                 * This promotes better observability and debugging capability.\r\n                 */\r\n                if (!hasLogging) {\r\n                    issues.push(`${file} - Missing logging in try-catch block.`);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return issues;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"654de85107c659fc50d43739a107240e516da9c8","contentHash":"dd8012209d429729074458c7fe4735eacccfc9d38907a8b9d23e73c754373db3"},"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectRateLimiting.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectRateLimiting.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":60}},"2":{"start":{"line":5,"column":21},"end":{"line":5,"column":42}},"3":{"start":{"line":16,"column":19},"end":{"line":16,"column":21}},"4":{"start":{"line":17,"column":25},"end":{"line":17,"column":30}},"5":{"start":{"line":22,"column":4},"end":{"line":44,"column":7}},"6":{"start":{"line":25,"column":12},"end":{"line":42,"column":13}},"7":{"start":{"line":30,"column":29},"end":{"line":30,"column":43}},"8":{"start":{"line":36,"column":16},"end":{"line":41,"column":17}},"9":{"start":{"line":36,"column":37},"end":{"line":39,"column":51}},"10":{"start":{"line":40,"column":20},"end":{"line":40,"column":42}},"11":{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},"12":{"start":{"line":47,"column":8},"end":{"line":47,"column":73}},"13":{"start":{"line":48,"column":8},"end":{"line":48,"column":70}},"14":{"start":{"line":51,"column":8},"end":{"line":51,"column":87}},"15":{"start":{"line":53,"column":4},"end":{"line":53,"column":18}}},"fnMap":{"0":{"name":"detectRateLimitingIssues","decl":{"start":{"line":15,"column":9},"end":{"line":15,"column":33}},"loc":{"start":{"line":15,"column":45},"end":{"line":54,"column":1}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":8},"end":{"line":23,"column":9}},"loc":{"start":{"line":23,"column":29},"end":{"line":43,"column":9}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":30},"end":{"line":36,"column":31}},"loc":{"start":{"line":36,"column":37},"end":{"line":39,"column":51}},"line":36}},"branchMap":{"0":{"loc":{"start":{"line":25,"column":12},"end":{"line":42,"column":13}},"type":"if","locations":[{"start":{"line":25,"column":12},"end":{"line":42,"column":13}},{"start":{},"end":{}}],"line":25},"1":{"loc":{"start":{"line":25,"column":16},"end":{"line":29,"column":51}},"type":"binary-expr","locations":[{"start":{"line":25,"column":16},"end":{"line":25,"column":55}},{"start":{"line":26,"column":16},"end":{"line":26,"column":56}},{"start":{"line":27,"column":16},"end":{"line":27,"column":49}},{"start":{"line":28,"column":16},"end":{"line":28,"column":58}},{"start":{"line":29,"column":16},"end":{"line":29,"column":51}}],"line":25},"2":{"loc":{"start":{"line":36,"column":16},"end":{"line":41,"column":17}},"type":"if","locations":[{"start":{"line":36,"column":16},"end":{"line":41,"column":17}},{"start":{},"end":{}}],"line":36},"3":{"loc":{"start":{"line":36,"column":37},"end":{"line":39,"column":51}},"type":"binary-expr","locations":[{"start":{"line":36,"column":37},"end":{"line":36,"column":66}},{"start":{"line":37,"column":20},"end":{"line":37,"column":30}},{"start":{"line":38,"column":20},"end":{"line":38,"column":52}},{"start":{"line":39,"column":20},"end":{"line":39,"column":51}}],"line":36},"4":{"loc":{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},{"start":{"line":50,"column":9},"end":{"line":52,"column":5}}],"line":46}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":3,"7":1,"8":1,"9":1,"10":0,"11":1,"12":1,"13":1,"14":0,"15":1},"f":{"0":1,"1":3,"2":1},"b":{"0":[1,2],"1":[3,1,1,1,1],"2":[0,1],"3":[1,1,1,1],"4":[1,0]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectRateLimiting.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectRateLimiting.ts"],"names":[],"mappings":";;AAYA,4DAgDC;AA5DD,oEAAoE;AACpE,2CAAkD;AAElD;;;;;;;;GAQG;AACH,SAAgB,wBAAwB,CAAC,GAAQ,EAAE,IAAY;IAC3D,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,IAAI,cAAc,GAAG,KAAK,CAAC;IAE3B;;;OAGG;IACH,IAAA,mBAAU,EAAC,GAAG,EAAE;QACZ,cAAc,CAAC,IAAI;YACf,8BAA8B;YAC9B,IACI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;gBACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;gBACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK;gBACjC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY;gBAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,KAAK,EACrC,CAAC;gBACC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;gBAE5B;;;;mBAIG;gBACH,IACI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CACZ,GAAG,CAAC,IAAI,KAAK,gBAAgB;oBAC7B,GAAG,CAAC,MAAM;oBACV,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;oBAChC,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,WAAW,CAClC,EACH,CAAC;oBACC,cAAc,GAAG,IAAI,CAAC;gBAC1B,CAAC;YACL,CAAC;QACL,CAAC;KACJ,CAAC,CAAC;IAEH,wEAAwE;IACxE,IAAI,CAAC,cAAc,EAAE,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,6CAA6C,IAAI,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,yCAAyC,CAAC,CAAC;IAClE,CAAC;SAAM,CAAC;QACJ,OAAO,CAAC,GAAG,CAAC,2DAA2D,IAAI,EAAE,CAAC,CAAC;IACnF,CAAC;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["// Import simple walker from acorn-walk to traverse AST nodes easily\r\nimport { simple as walkSimple } from 'acorn-walk';\r\n\r\n/**\r\n * Detects whether rate limiting middleware is used in an Express application.\r\n * Rate limiting is a crucial security and performance control, especially in public APIs,\r\n * to prevent abuse like brute-force attacks or DoS.\r\n * \r\n * @param ast - Abstract Syntax Tree of the parsed JavaScript/TypeScript file\r\n * @param file - Name of the file being scanned (used for tagging issues)\r\n * @returns string[] - List of detected issues related to missing rate limiting\r\n */\r\nexport function detectRateLimitingIssues(ast: any, file: string): string[] {\r\n    const issues: string[] = [];\r\n    let foundRateLimit = false;\r\n\r\n    /**\r\n     * Traverse the AST to find calls to `app.use(...)`,\r\n     * which is where Express middleware is registered.\r\n     */\r\n    walkSimple(ast, {\r\n        CallExpression(node) {\r\n            // Look for app.use(...) calls\r\n            if (\r\n                node.callee.type === 'MemberExpression' &&\r\n                node.callee.object.type === 'Identifier' &&\r\n                node.callee.object.name === 'app' &&\r\n                node.callee.property.type === 'Identifier' &&\r\n                node.callee.property.name === 'use'\r\n            ) {\r\n                const args = node.arguments;\r\n\r\n                /**\r\n                 * Look through all arguments passed to app.use(...)\r\n                 * We are specifically checking if the rateLimit middleware is used.\r\n                 * This typically appears as: `app.use(rateLimit({ ... }))`\r\n                 */\r\n                if (\r\n                    args.some(arg =>\r\n                        arg.type === 'CallExpression' &&\r\n                        arg.callee &&\r\n                        arg.callee.type === 'Identifier' &&\r\n                        arg.callee.name === 'rateLimit'\r\n                    )\r\n                ) {\r\n                    foundRateLimit = true;\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // If no rate limiting was found, report it as a potential vulnerability\r\n    if (!foundRateLimit) {\r\n        console.log(`❌ Scanner found missing rate limiting in: ${file}`);\r\n        issues.push(`${file} - Rate limiting middleware is missing.`);\r\n    } else {\r\n        console.log(`✅ Scanner detected rate limiting is already present in: ${file}`);\r\n    }\r\n\r\n    return issues;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"031492466b2550b8fabc2a5659ac7cba7d00fa6f","contentHash":"c5efc25e906e3dfd13246b870a22569afa64d1cfda49346895fffbd3d3fb0d03"},"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectInputValidation.ts":{"path":"C:\\Users\\tasne\\Desktop\\HealOps\\src\\detectors\\detectInputValidation.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":66}},"2":{"start":{"line":5,"column":21},"end":{"line":5,"column":42}},"3":{"start":{"line":15,"column":19},"end":{"line":15,"column":21}},"4":{"start":{"line":23,"column":4},"end":{"line":55,"column":7}},"5":{"start":{"line":25,"column":12},"end":{"line":53,"column":13}},"6":{"start":{"line":31,"column":34},"end":{"line":31,"column":51}},"7":{"start":{"line":32,"column":38},"end":{"line":32,"column":55}},"8":{"start":{"line":34,"column":16},"end":{"line":52,"column":17}},"9":{"start":{"line":35,"column":40},"end":{"line":35,"column":45}},"10":{"start":{"line":41,"column":20},"end":{"line":47,"column":21}},"11":{"start":{"line":42,"column":24},"end":{"line":46,"column":95}},"12":{"start":{"line":42,"column":81},"end":{"line":46,"column":93}},"13":{"start":{"line":49,"column":20},"end":{"line":51,"column":21}},"14":{"start":{"line":50,"column":24},"end":{"line":50,"column":115}},"15":{"start":{"line":56,"column":4},"end":{"line":56,"column":18}}},"fnMap":{"0":{"name":"detectInputValidationIssues","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":36}},"loc":{"start":{"line":14,"column":48},"end":{"line":57,"column":1}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":8},"end":{"line":24,"column":9}},"loc":{"start":{"line":24,"column":29},"end":{"line":54,"column":9}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":42,"column":68},"end":{"line":42,"column":69}},"loc":{"start":{"line":42,"column":81},"end":{"line":46,"column":93}},"line":42}},"branchMap":{"0":{"loc":{"start":{"line":25,"column":12},"end":{"line":53,"column":13}},"type":"if","locations":[{"start":{"line":25,"column":12},"end":{"line":53,"column":13}},{"start":{},"end":{}}],"line":25},"1":{"loc":{"start":{"line":25,"column":16},"end":{"line":29,"column":67}},"type":"binary-expr","locations":[{"start":{"line":25,"column":16},"end":{"line":25,"column":55}},{"start":{"line":26,"column":16},"end":{"line":26,"column":56}},{"start":{"line":27,"column":16},"end":{"line":27,"column":49}},{"start":{"line":28,"column":16},"end":{"line":28,"column":58}},{"start":{"line":29,"column":16},"end":{"line":29,"column":67}}],"line":25},"2":{"loc":{"start":{"line":34,"column":16},"end":{"line":52,"column":17}},"type":"if","locations":[{"start":{"line":34,"column":16},"end":{"line":52,"column":17}},{"start":{},"end":{}}],"line":34},"3":{"loc":{"start":{"line":34,"column":20},"end":{"line":34,"column":100}},"type":"binary-expr","locations":[{"start":{"line":34,"column":20},"end":{"line":34,"column":29}},{"start":{"line":34,"column":33},"end":{"line":34,"column":61}},{"start":{"line":34,"column":65},"end":{"line":34,"column":100}}],"line":34},"4":{"loc":{"start":{"line":41,"column":20},"end":{"line":47,"column":21}},"type":"if","locations":[{"start":{"line":41,"column":20},"end":{"line":47,"column":21}},{"start":{},"end":{}}],"line":41},"5":{"loc":{"start":{"line":41,"column":24},"end":{"line":41,"column":107}},"type":"binary-expr","locations":[{"start":{"line":41,"column":24},"end":{"line":41,"column":37}},{"start":{"line":41,"column":41},"end":{"line":41,"column":81}},{"start":{"line":41,"column":85},"end":{"line":41,"column":107}}],"line":41},"6":{"loc":{"start":{"line":42,"column":81},"end":{"line":46,"column":93}},"type":"binary-expr","locations":[{"start":{"line":42,"column":81},"end":{"line":42,"column":88}},{"start":{"line":43,"column":28},"end":{"line":43,"column":61}},{"start":{"line":44,"column":28},"end":{"line":44,"column":42}},{"start":{"line":45,"column":28},"end":{"line":45,"column":64}},{"start":{"line":46,"column":28},"end":{"line":46,"column":93}}],"line":42},"7":{"loc":{"start":{"line":49,"column":20},"end":{"line":51,"column":21}},"type":"if","locations":[{"start":{"line":49,"column":20},"end":{"line":51,"column":21}},{"start":{},"end":{}}],"line":49}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":1,"14":1,"15":1},"f":{"0":1,"1":1,"2":0},"b":{"0":[1,0],"1":[1,1,1,1,1],"2":[1,0],"3":[1,1,1],"4":[0,1],"5":[1,1,0],"6":[0,0,0,0,0],"7":[1,0]},"inputSourceMap":{"version":3,"file":"C:/Users/tasne/Desktop/HealOps/src/detectors/detectInputValidation.ts","sources":["C:/Users/tasne/Desktop/HealOps/src/detectors/detectInputValidation.ts"],"names":[],"mappings":";;AAWA,kEAoDC;AA/DD,wFAAwF;AACxF,2CAAkD;AAElD;;;;;;;GAOG;AACH,SAAgB,2BAA2B,CAAC,GAAQ,EAAE,IAAY;IAC9D,MAAM,MAAM,GAAa,EAAE,CAAC;IAE5B;;;;;;OAMG;IACH,IAAA,mBAAU,EAAC,GAAG,EAAE;QACZ,cAAc,CAAC,IAAI;YACf,IACI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,kBAAkB;gBACvC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;gBACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,KAAK;gBACjC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY;gBAC1C,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,gCAAgC;cACtF,CAAC;gBACC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAK,uDAAuD;gBAChG,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,qDAAqD;gBAE9F,2DAA2D;gBAC3D,IAAI,SAAS,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS,IAAI,OAAO,SAAS,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;oBACnF,IAAI,aAAa,GAAG,KAAK,CAAC;oBAE1B;;;;uBAIG;oBACH,IAAI,aAAa,IAAI,aAAa,CAAC,IAAI,KAAK,iBAAiB,IAAI,aAAa,CAAC,QAAQ,EAAE,CAAC;wBACtF,aAAa,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CACvC,CAAC,OAAO,EAAE,EAAE,CACR,OAAO;4BACP,OAAO,CAAC,IAAI,KAAK,gBAAgB;4BACjC,OAAO,CAAC,MAAM;4BACd,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY;4BACpC,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CACxE,CAAC;oBACN,CAAC;oBAED,yEAAyE;oBACzE,IAAI,CAAC,aAAa,EAAE,CAAC;wBACjB,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,qDAAqD,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;oBAC/F,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;KACJ,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["// Import simple walker from acorn-walk to traverse AST nodes without tracking ancestors\r\nimport { simple as walkSimple } from 'acorn-walk';\r\n\r\n/**\r\n * Detects missing input validation middleware in POST and PUT routes.\r\n * This is crucial for API security and preventing injection, type errors, or malformed requests.\r\n * \r\n * @param ast - Parsed AST of a JavaScript/TypeScript file\r\n * @param file - The file name, used to associate detected issues\r\n * @returns string[] - A list of warning messages for routes lacking validation\r\n */\r\nexport function detectInputValidationIssues(ast: any, file: string): string[] {\r\n    const issues: string[] = [];\r\n\r\n    /**\r\n     * Traverse the AST and inspect every function call.\r\n     * We're specifically looking for:\r\n     * - `app.post(...)`\r\n     * - `app.put(...)`\r\n     * These are routes where user input is commonly handled.\r\n     */\r\n    walkSimple(ast, {\r\n        CallExpression(node) {\r\n            if (\r\n                node.callee.type === 'MemberExpression' &&\r\n                node.callee.object.type === 'Identifier' &&\r\n                node.callee.object.name === 'app' &&\r\n                node.callee.property.type === 'Identifier' &&\r\n                ['post', 'put'].includes(node.callee.property.name) // Target only POST & PUT routes\r\n            ) {\r\n                const routePath = node.arguments[0];     // Expected to be a literal string (e.g., \"/api/login\")\r\n                const middlewareArg = node.arguments[1]; // Expected to be an array of middlewares or handlers\r\n\r\n                // Validate the route path is a literal (e.g., '/register')\r\n                if (routePath && routePath.type === 'Literal' && typeof routePath.value === 'string') {\r\n                    let hasValidation = false;\r\n\r\n                    /**\r\n                     * Look for common validation middlewares used in Express.js,\r\n                     * such as `check()`, `body()`, `param()`, `query()` (e.g., from express-validator).\r\n                     * These are usually passed as part of an array of middleware.\r\n                     */\r\n                    if (middlewareArg && middlewareArg.type === 'ArrayExpression' && middlewareArg.elements) {\r\n                        hasValidation = middlewareArg.elements.some(\r\n                            (element) =>\r\n                                element &&\r\n                                element.type === 'CallExpression' &&\r\n                                element.callee &&\r\n                                element.callee.type === 'Identifier' &&\r\n                                ['check', 'body', 'param', 'query'].includes(element.callee.name)\r\n                        );\r\n                    }\r\n\r\n                    // If no validation logic was found in middleware, push a warning message\r\n                    if (!hasValidation) {\r\n                        issues.push(`${file} - Missing input validation middleware for route: ${routePath.value}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return issues;\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"50bbe8bd3c362d0dde2787297cfb7ceae6e99732","contentHash":"2cb5e0c1b540493f09cd4a5abbb34e8455c40a0dfed5e0a398b5027e244be136"}}